version: "3.8"
services:
  # nginx:
  #   image: nginx:stable-alpine
  #   container_name: nginx
  #   volumes:
  #     - ./nginx/templates:/etc/nginx/templates
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   environment:
  #     - NGINX_PORT=${NGINX_PORT}
  #     - BACKEND_PORT=${BACKEND_PORT}
  #   ports:
  #     - 80:${NGINX_PORT}
  #   depends_on:
  #     - api
  #     - postgres
  #     - redis
  #   networks:
  #     - nesjs-network
  api:
    container_name: "authentication_${NODE_ENV}"
    image: "authentication_${NODE_ENV}"
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./server
      target: "${NODE_ENV}"
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - 9229:9229
      - ${BACKEND_PORT}:${BACKEND_PORT}
    depends_on:
      - database
    command: ["sh", "./wait-for-postgres.sh", "sh", "./docker-entrypoint.sh"]
    networks:
      - authentication-network
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # redis:
  #   container_name: redis
  #   image: redis:latest
  #   networks:
  #     - nesjs-network
  database:
    env_file:
      - .env
    container_name: postgres
    image: postgres:latest
    networks:
      - authentication-network
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: "${DB_NAME}"
      PG_DATA: /var/lib/postgresql/data
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
  # pgadmin:
  #   links:
  #     - postgres:postgres
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   volumes:
  #     - ./pgdata/pgadmin:/root/.pgadmin
  #   env_file:
  #     - .env
  #   networks:
  #     - nesjs-network

networks:
  authentication-network:
